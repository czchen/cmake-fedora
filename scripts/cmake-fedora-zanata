#!/bin/bash

function print_usage(){
    cat<<END
NAME 
    cmake-fedora-zanata - cmake-fedora helper script to operate with zanata the translation system

SYNOPSIS
    cmake-fedora-zanata [options] new [-l <locales> | -c ] [-p <projType> ] <url> [<project> [<version>]]
    cmake-fedora-zanata [options] xml-download <url> [<project> [<version>]]
    cmake-fedora-zanata [options] xml-make <url> [<project> [<version>]]

ARGUMENTS and OPTIONS
    Arguments:
        <url> 
	    Zanata server URL (e.g. https://translate.zanata.org/zanata/)

	<project>
	    project: project ID in Zanata.
	    Default: name of parent directory.

	<version>
	    version ID in Zanata.
	    Default: master

    Common options:
        -z <zanata.xml>
	     Output zanata.xml file.
	

DESCRIPTION
    Note that this program assumes that your ~/.config/zanata.ini is set,
    and you registered in the coresponding Zanata server.

    This program only support gettext and podir project type.

    Following sub-command are recognized:
        new 
	    All round-trip workflow. From creating project, version,
            fix zanata.xml, and push the source files and existing translations.
	    By default, it uses /usr/share/locales as source of client locales.

	    Options:
		-c
		    Derive client locales from local translation files (.po).

		-l <locale1;locale2;...>
		    Specify client locale manually. Use ';' to separate locales.
	    
	xml-download
	    Download zanata.xml from Zanata Server.


	xml-make
	    Make a working zanata.xml

END
}

cmakeOptions=()

systemLocales=
projectType=gettext
poDir="."
locales=""
zanataXml="zanata.xml"

function parse_options(){
    while getopts "cl:p:P:z:" opt;do
	case $opt in
	    c )
		cmakeOptions+=-D
		systemLocales=1
		;;
	    l )
		locales=$OPTARG
		;;
	    p )
		projectType=$OPTARG
		;;
	    P )
		poDir=$OPTARG
		;;
	    z )
		zanataXml=$OPTARG
		;;
	esac
    done
    shift $((OPTIND-1))
}

url=
project=
version=

function parse_arguments(){
    if [ -z "${url}" ];then
	url=$1
	shift
    fi
    if [ -z "${project}" ];then
	project=$1
	shift
    fi
    if [ -z "${version}" ];then
	version=$1
	shift
    fi
}

function convert_to_cmake_options(){
    for o in url project version projectType
}

# Check for dependency
for cmd in cmake ;do
    if ! which $cmd &>/dev/null;then
	echo "[Error] $cmd is not found in path" > /dev/stderr
	exit 2
    fi
done

SCRIPT_DIR=$(readlink -f `dirname $0`)
CMAKE_FEDORA_MODULE_PATHS=( Modules cmake-fedora/Modules ${SCRIPT_DIR}/../Modules /usr/share/cmake/Modules ) 
for d in "${CMAKE_FEDORA_MODULE_PATHS[@]}" ;do
    if [ -r $d/ManageGettextScript.cmake ];then
	MANAGE_GETTEXT_SCRIPT_CMAKE=$d/ManageGettextScript.cmake
	break
    fi
done
if [ -z "${MANAGE_GETTEXT_SCRIPT_CMAKE}" ];then
    echo "[Error] ManageGettextScript.cmake is not found" > /dev/stderr
    exit 2
fi

for d in "${CMAKE_FEDORA_MODULE_PATHS[@]}" ;do
    if [ -r $d/ManageZanataScript.cmake ];then
	MANAGE_ZANATA_SCRIPT_CMAKE=$d/ManageZanataScript.cmake
	break
    fi
done
if [ -z "${MANAGE_ZANATA_SCRIPT_CMAKE}" ];then
    echo "[Error] ManageZanataScript.cmake is not found" > /dev/stderr
    exit 2
fi

if [ $# = 0 ]; then
    print_usage
    exit 0
fi

parse_options

subCmd=$1
shift

case $subCmd in
    new )
	parse_options
	parse_arguments
	;;
    xml-download )
	parse_options
	parse_arguments
	cmake -D cmd=zanata_xml_download -D url=$url  -P "${MANAGE_ZANTA_SCRIPT_CMAKE}"
	;;
    xml-make )
	parse_options
	parse_arguments
	;;
    * )
	echo "Sub-command $subCmd is not recognized" > /dev/stderr
	exit 2
	;;
esac

exit 0

