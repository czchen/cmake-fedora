#!/bin/bash

function print_usage(){
    cat <<END
Usage: $0 [Options]  <srpm> [scope1 [scope2 ...]]

  This command automates the release process from SRPM to bodhi

ARGUMENTS
    <srpm>
	Source RPM to be build from.

    [scope1 [scope2 ...]]
        What should be build against.
	Valid values:
	    rawhide: Build rawhide.
	    fedora: Build actives fedora releases, including Rawhide.
	    fedora_1: Build the latest supported fedora releases.
	    This is one release eariler than rawhide.

	    fedora_2: Build the second latest supported fedora releases.
	    This is two releases eariler than rawhide.

	    f22 f21 ...: Build the specified fedora releases.

	    epel: Build the currently supported EPEL releases.

	    epel_1: Build the latest supported EPEL releases.

	    epel_2: Build the second latest supported EPEL releases.

	    epel7 el6 ... : The EPEL releases to be built.

        If scopes is not specified, then it will use the existing branch for koji.

OPTIONS
    -b bugs: The list of bug this update fixed. Split with ','.

    -d work_dir: The work directory. Default is current directory.

    -m <message>: Message used as commit message.
       If not specified, then use the latest changelog text.
       (i.e. rpm -qp --queryformat "%{ChangeLogText}" <srpm>)

    -i: Import mode

    -s: Scratch build instead of real build.

    -t updateType: Update type. Valid values:
       [bugfix|security|enhancement|newpackage].
       Default: 
         newpackage: if this package does not exist in bodhi
         enhancement: if the latest change log item has "Enhancement:"
         bugfix: for everything else.

    srpm: SRPM file to be scratch-built with koji.

ENVIRONMENT
    FEDPKG_DIR
        The directory that this program should work on.
	If -d is not specified, this program will use this value as
	work directory.

    BODHI_USER
        Bodhi username. If not specified, it uses environment variable
       	LOGNAME.


END
}

##=== Begin functions ===

function contains_element () {
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

# is target been built in koji
# Valid target example: cmake-fedora-1.4.0-1.fc21
function is_target_built(){
    target=$1
    $KOJI_CMD buildinfo $target | grep -qcs -i "State: COMPLETE"
}

# is package exists in bodhi
# Valid target example: cmake-fedora
function is_package_new_in_bodhi(){
    package=$1
    if $CURL_CMD -s -f -X GET "https://admin.fedoraproject.org/pkgdb/api/package/?pkgname=${package}" > /dev/null; then
	return 1
    else
	return 0
    fi
}

function try_command(){
    if ! "$@" ;then
	ret=$?
	echo "cmake-fedora-fedpkg: Failed to $@" > /dev/stderr
	exit $ret
    fi
}

# is target in bodhi
# Valid target example: cmake-fedora-1.4.0-1.fc21
function is_target_in_bodhi(){
    local result=$($CURL_CMD -X GET "https://bodhi.fedoraproject.org/builds/?nvr=$1")
    if [ -z $result ]; then
	return 1
    elif grep -qcs -i '"total": 0,' > /dev/null;then
	return 1
    fi
    return 0
}

function is_update_enhancement(){
    echo $ChangeLogText | grep -qcs -e "Enhancement:"
}

## fedpkg_build <srpm> <gitBranch> <firstBranch> <Nvr> [Options]
function fedpkg_build(){
    local optArray=()
    local srpm=$1
    local gitBranch=$2
    local firstBranch=$3
    local nvr=$4
    shift 4
    local kojiBuildInfoSuffix=`$CMakeFedoraKojiCmd koji-buildinfo-suffix $gitBranch`
    local build="$nvr.$kojiBuildInfoSuffix"
    if [ $ScratchBuild -eq 1 ];then
	local kojiBranch=$($CMakeFedoraKojiCmd branch $gitBranch)
	try_command ${FEDPKG_CMD} --dist $kojiBranch scratch-build --srpm "${srpm}"
    else
	## Real build
	try_command ${FEDPKG_CMD} switch-branch $b
	echo -n "Has $build already been built in koji? ... " > /dev/stderr
	if is_target_built $build ;then
	    echo "yes, skip this." > /dev/stderr
	else
	    echo "no, start building." > /dev/stderr
	    if [[ -z "$srpm" ]];then
		if [[ "$gitBranch" = "$firstBranch" ]];then
		    try_command ${FEDPKG_CMD} import $Srpm
		    try_command ${FEDPKG_CMD} commit -m "$Msg"
		else
		    try_command $GIT_CMD merge $firstBranch
		fi
		try_command ${FEDPKG_CMD} push
		echo "Building $Nvr.$bodhi_branch" > /dev/stderr
		try_command ${FEDPKG_CMD} build
	    else
		local target=`$CMakeFedoraKojiCmd target $gitBranch`
		try_command ${FEDPKG_CMD} build --target $target --srpm $srpm "$@" 
	    fi
	fi
    fi
}

##=== Dependency Checking ===
ScriptDir=$(readlink -f `dirname $0`)
for d in Modules cmake-fedora/Modules ${ScriptDir}/../Modules /usr/share/cmake/Modules;do
    if [ -r $d/CmakeFedoraScript.cmake ];then
	CMakeFedoraScriptCMake=$d/CmakeFedoraScript.cmake
    fi
done
if [ -z "${CMakeFedoraScriptCMake}" ];then
    echo "[Error] CmakeFedoraScript.cmake is not found" > /dev/stderr
    exit -2
fi

CMakeFedoraKojiCmd=${ScriptDir}/cmake-fedora-koji
if [ ! -x ${CMakeFedoraKojiCmd} ];then
    echo "[Error] cmake-fedora-koji is not found" > /dev/stderr
    exit -2
fi

CMakeFedoraPkgdbCmd=${ScriptDir}/cmake-fedora-pkgdb
if [ ! -x ${CMakeFedoraPkgdbCmd} ];then
    echo "[Error] cmake-fedora-db is not found" > /dev/stderr
    exit -2
fi


for cmd in curl fedpkg bodhi koji rpm ;do
    CMakeFedoraScriptOptArray=(-D cmd=find_program verbose_level=1  )
    CMakeFedoraScriptOptArray+=( -D "names=$cmd")
    CmdPath=`cmake "${CMakeFedoraScriptOptArray[@]}" -P ${CMakeFedoraScriptCMake}`
    if [ $? -ne 0 ];then
	exit $?
    fi

    VarName=`tr a-z A-Z <<<$cmd`_CMD
    eval "$VarName=$CmdPath"
done

##=== Parameter Parsing ===
if [ $# = 0 ]; then
    print_usage
    exit 0
fi


: ${BODHI_USER:=$LOGNAME}
echo "BODHI_USER=$BODHI_USER"

WorkDir=${FEDPKG_DIR:-$PWD}
Msg=
BodhiOptArray=()
Bugs=
ScratchBuild=
UpdateType=

while getopts "hb:d:m:st:" opt;do
    case $opt in
	h)
	    print_usage
	    exit 0
	    ;;
	b )
	    Bugs="$OPTARG"
	    ;;
	d )
	    WorkDir="$OPTARG"
	    ;;
	m )
	    Msg="$OPTARG"
	    ;;
	s )
	    ScratchBuild=1
	    ;;
	t )
	    UpdateType="$OPTARG"
	    ;;
	* )
	    ;;
	    
    esac
done
shift $((OPTIND-1)) 

Srpm=$1
shift

if [[ -z $Srpm ]];then
    print_usage
    exit 1
else
    Srpm=`readlink -f $Srpm`
fi

if [[ ! -r "$Srpm" ]];then
    echo "[Fatal] Failed to read $Srpm" > /dev/stderr
    exit 2
fi

if [[ -n "$Bugs" ]];then
    BodhiOptArray+=(--bugs $Bugs)
fi

if [[ ! -w $WorkDir ]];then
    if ! mkdir -p $WorkDir; then
	echo "$WorkDir is not writable." > /dev/stderr
	exit 2
    fi
fi
echo "WorkDir=$WorkDir" > /dev/stderr

ChangeLogText=`$RPM_CMD -qp --queryformat "%{ChangeLogText}" $Srpm`
echo "ChangeLogText=$ChangeLogText" > /dev/stderr

if [[ -z "$Msg" ]];then
    Msg=$ChangeLogText
fi

Name=`$RPM_CMD -qp --queryformat "%{NAME}" $Srpm`
echo "Name=$Name" > /dev/stderr

## Nvr here does not include release tag,
##  (e.g. cmake-fedora-2.0.0-1)
Nvr=`$RPM_CMD -qp --queryformat "%{NAME}-%{VERSION}-%{RELEASE}" $Srpm | sed -e 's/\.fc[0-9]*$//' | sed -e 's/\.el[0-9]*$//'`

if [[ -z "$UpdateType" ]];then
    if  is_package_new_in_bodhi $Name; then
	UpdateType=newpackage
    elif is_update_enhancement; then
	UpdateType=enhancement
    else
	UpdateType=bugfix
    fi
fi
echo "UpdateType=$UpdateType" > /dev/stderr


##=== Determine Branch To Build ===
ScopeBranchArray=(`$CMakeFedoraKojiCmd git-branch $@ | xargs ` )
PackageBranchArray=(`$CMakeFedoraPkgdbCmd $Name`)

declare -a ActionBranchArray=()

if [ -z "$PackageBranchArray" ];then
    ## Cannot found package in PkgDb, maybe a new package?
    if [ $ScratchBuild -eq 0 ];then
	## Failed as the non-scratch build requires a existing package
	echo "[ERROR] Failed to find package in PkgDB for non-scratch build" > /dev/stderr
	exit 1
    fi
    ActionBranchArray=(${ScopeBranchArray[@]})
else
    ## Interset between scope and branches that package has
    for activeBranch in "${PackageBranchArray[@]}"; do
	if contains_element "${activeBranch}" "${ScopeBranchArray[@]}";then
	    ActionBranchArray+=(${activeBranch})
	fi
    done
fi

##=== Build ===
if [ $ScratchBuild -eq 1 ];then
    ##=== Begin Scratch Build ===
    for b in "${ActionBranchArray[@]}";do
	try_command fedpkg_build "$Srpm" "$b" "" $Nvr --scratch
    done
    exit 0
    ##=== End   Scratch Build ===
fi

##=== Non-Scratch Build ===
cd $WorkDir
if [[ ! -r $Name ]];then
    try_command ${FEDPKG_CMD} clone $Name
fi

if [[ ! -x $Name ]];then
    echo "Failed to change to $WorkDir/$Name" > /dev/stderr
    exit 3
fi

cd $Name
echo "Pulling $Name..." > /dev/stderr
try_command ${FEDPKG_CMD} pull

echo -n "Branches to process:"
(IFS=' ' echo "${ActionBranchArray[@]}")
bodhiPushList=
first=

for b in "${ActionBranchArray[@]}";do
    if [[ -z "$first" ]];then
	first=$b
    fi

    try_command fedpkg_build "" "$b" "$first" $Nvr

    bodhi_branch=`$CMakeFedoraKojiCmd bodhi-branch $b`

    if [[ -n "$bodhi_branch" ]];then
	echo -n "Has $Target already in bodhi? ... " > /dev/stderr
	if is_target_in_bodhi $Target ; then
	    echo "yes, skip this." > /dev/stderr
	else
	    echo "no, will push it." > /dev/stderr
	    bodhiPushList="$bodhiPushList $Nvr.$bodhi_branch"
	fi
    fi
done

if [[ -n "$bodhiPushList" ]];then
    try_command ${BODHI_CMD} -n "${BodhiOptArray[@]}" -t $UpdateType -u $BODHI_USER -N "$ChangeLogText" -R testing $bodhiPushList
else
    echo "Nothing to push to bodhi." > /dev/stderr
fi

